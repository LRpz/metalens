{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MetaLens Documentation","text":"<p>Welcome to the MetaLens documentation! MetaLens is a tool for generating super-resolved spatial metabolomics data from microscopy images.</p> <ul> <li> <p> User Guide</p> <p>Detailed instructions for installation and usage</p> <p> Read the guide</p> </li> </ul>"},{"location":"user_guide/","title":"MetaLens User Guide","text":"<p>MetaLens is a tool for generating super-resolved spatial metabolomics data from microscopy images. This documentation provides detailed instructions for installation and usage.</p>"},{"location":"user_guide/#1-installation","title":"1. Installation","text":""},{"location":"user_guide/#11-prerequisites","title":"1.1. Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>CUDA-capable GPU with 16GB+ RAM</li> <li>Conda (recommended)</li> </ul>"},{"location":"user_guide/#12-step-by-step-installation","title":"1.2. Step-by-Step Installation","text":"<pre><code># 1. Create and activate conda environment\nconda create -n metalens python=3.10\nconda activate metalens\n\n# 2. Install MetaLens\ngit clone https://github.com/LRpz/metalens.git\ncd ./metalens\n\n# For command-line interface only:\npip install -e .\n\n# For full installation with Napari plugin:\npip install -e .[napari]</code></pre>"},{"location":"user_guide/#2-using-metalens","title":"2. Using MetaLens","text":"<p>Hardware Requirements and Performance:</p> <ul> <li> <p>GPU: CUDA-capable GPU with 16GB+ VRAM required</p> </li> <li> <p>Training Performance:</p> <ul> <li>Dataset size: 16,000 patches</li> <li>Training parameters:<ul> <li><code>epochs</code>: 200</li> <li><code>batch_size</code>: 32</li> </ul> </li> <li>Expected runtime: ~2 hours</li> </ul> </li> <li> <p>Inference Performance:</p> <ul> <li>Example configuration:<ul> <li><code>evaluation_range</code>: 500 pixels (size of region to analyze)</li> <li><code>batch_size</code>: 128 patches</li> <li><code>step_size</code>: 2 pixels (distance between predictions)</li> </ul> </li> <li>Expected runtime: ~3 minutes</li> </ul> </li> </ul>"},{"location":"user_guide/#21-on-example-data","title":"2.1. On Example Data","text":"<ol> <li> <p>Download the required files:</p> <ul> <li>Training data from this link</li> <li>Ablation Mark segmentation model from this link</li> <li>Trained MetaLens model from this link</li> <li>Example evaluation dataset from this link</li> </ul> </li> <li> <p>Place the files in their respective directories:</p> <ul> <li>Extract training patches to <code>data/training_data/</code></li> <li>Place <code>AM_segmentation.pth</code> in <code>models/</code></li> <li>Place <code>trained_model.ckpt</code> in <code>models/</code></li> <li>Place <code>eval_dataset.tif</code> in <code>data/</code></li> </ul> </li> <li> <p>(Optional) Re-train on exemple training data:      <pre><code>python metalens/dl/train.py data/training_data/ models/</code></pre></p> </li> <li> <p>Run inference on the test dataset:</p> <p>Using napari</p> <pre><code>python -m napari</code></pre> <ul> <li> <p>In napari's GUI <code>Plugins &gt; Metalens</code></p> </li> <li> <p>Load test dataset <code>Load Microsocpy Data &gt; data/eval_dataset.tif</code></p> </li> <li>Load trained model <code>Load Model &gt; models/trained_model.ckpt</code> (Adjust model path if using a newly trained model)</li> <li>Adjust inference parameters:<ul> <li>Evaluation Range: Size of region to analyze, in pixels</li> <li>Step Size: Distance between predictions in pixels\\   Note: Lower step size provides more accurate predictions but increases computation time.    For visualization purposes, you can use larger step sizes combined with Gaussian blur    (recommended: step_size=2 with Gaussian blur sigma=2)</li> <li>Batch Size: Number of patches per batch, adjust based on available VRAM</li> </ul> </li> <li>Run inference using <code>Run Inference</code></li> <li>Save results using <code>Save Results</code></li> <li>Adjust vizualisation options using Napari's controls</li> </ul> <p>Using command line</p> <ul> <li> <p>Run     <pre><code>python metalens/dl/eval.py data/eval_dataset.tif models/trained_model.ckpt</code></pre></p> </li> <li> <p>Results data will be saved as <code>data/output.h5</code></p> </li> <li> <p>Visualize using Napari:     <pre><code>python -m napari</code></pre></p> </li> <li> <p>In napari's GUI <code>Plugins &gt; Metalens &gt; Load Predictions &gt; data/output/output.h5</code></p> </li> </ul> </li> </ol>"},{"location":"user_guide/#22-on-new-data","title":"2.2. On New Data","text":""},{"location":"user_guide/#221-required-data-format","title":"2.2.1. Required Data Format","text":"<p>Your input data should include:</p> <ol> <li> <p>Pre-MALDI Microscopy Images</p> <ul> <li>Format: Multi-channel TIFF (.tif)</li> <li>Channels: <ul> <li>Brightfield</li> <li>Fluorescence (optional)</li> </ul> </li> <li>Content: Stitched tiled microscopy with fiducials showing the biological sample</li> </ul> </li> <li> <p>Post-MALDI Microscopy Images</p> <ul> <li>Format: Single-channel TIFF (.tif)</li> <li>Channels: <ul> <li>Brightfield</li> </ul> </li> <li>Content: Stitched tiled microscopy with fiducials showing the matrix and ablation marks</li> </ul> </li> <li> <p>Mass Spectrometry Data</p> <ul> <li>Format: .imzML and .ibd</li> <li>Content: Centroided mass spectra for each ablation mark</li> </ul> </li> </ol>"},{"location":"user_guide/#222-preprocessing-pipeline","title":"2.2.2. Preprocessing Pipeline","text":""},{"location":"user_guide/#1-register-and-crop-microscopy-images","title":"1. Register and Crop Microscopy Images","text":"<p>This step aligns pre- and post-MALDI images and crops them to the region of interest.</p> <pre><code>python metalens/preprocessing/microscopy_registration_crop.py &lt;dataset_name&gt;</code></pre> <p>Expected input files:</p> <ul> <li><code>data/raw_data/&lt;dataset_name&gt;_preMALDI_channel1.tif</code></li> <li><code>data/raw_data/&lt;dataset_name&gt;_postMALDI_channel1.tif</code></li> </ul> <p>Output files:</p> <ul> <li><code>data/raw_data/&lt;dataset_name&gt;_cells.tif</code></li> <li><code>data/raw_data/&lt;dataset_name&gt;_ablation_marks_tf.tif</code></li> </ul>"},{"location":"user_guide/#2-cell-segmentation","title":"2. Cell Segmentation","text":"<p>This step performs cell segmentation using Cellpose's generalist model 'cyto2'.</p> <pre><code>python metalens/preprocessing/cell_segmentation.py &lt;dataset_name&gt;</code></pre> <p>Expected input:</p> <ul> <li><code>data/raw_data/&lt;dataset_name&gt;_cells.tif</code></li> </ul> <p>Output:</p> <ul> <li><code>data/raw_data/&lt;dataset_name&gt;_cells_mask.tif</code></li> </ul>"},{"location":"user_guide/#3-ablation-mark-segmentation","title":"3. Ablation Mark Segmentation","text":"<p>This step segments ablation marks using a custom pre-trained model. This model has been optimized to segment brightfield microscopy at 10X magnification of non overlapping ablation marks with DAN and DHB matrices.</p> <pre><code>python metalens/preprocessing/AM_segmenation_inference.py &lt;dataset_name&gt;</code></pre> <p>Expected input:</p> <ul> <li><code>data/raw_data/&lt;dataset_name&gt;_ablation_marks_tf.tif</code></li> </ul> <p>Output:</p> <ul> <li><code>data/raw_data/&lt;dataset_name&gt;_ablation_marks_tf_pred.tif</code></li> </ul>"},{"location":"user_guide/#4-generate-training-patches","title":"4. Generate Training Patches","text":"<p>This step creates training patches by combining microscopy and mass spec data.</p> <pre><code>python metalens/preprocessing/make_training_patches.py &lt;dataset_name&gt;</code></pre> <p>Expected inputs:</p> <ul> <li>All previous outputs</li> <li>Mass spec data:<ul> <li><code>data/raw_data/&lt;dataset_name&gt;.imzML</code></li> <li><code>data/raw_data/&lt;dataset_name&gt;.ibd</code></li> </ul> </li> </ul> <p>Output:</p> <ul> <li>Training patches in <code>data/training_data/</code></li> <li><code>data/training_data/ion_intensities.csv</code></li> </ul>"},{"location":"user_guide/#223-training","title":"2.2.3. Training","text":"<pre><code>python metalens/dl/train.py &lt;training_data_folder&gt; &lt;model_output_folder&gt;</code></pre> <p>Parameters:</p> <ul> <li><code>batch_size</code>: Default 32</li> <li><code>learning_rate</code>: Default 1e-3</li> <li><code>epochs</code>: Default 200</li> </ul> <p>Expected inputs:</p> <ul> <li> <p>Training data folder containing:</p> <ul> <li><code>ion_intensities.csv</code>: Metabolite intensities for each patch</li> <li>Training patches (.tif files) referenced in the CSV</li> </ul> </li> </ul> <p>Output:</p> <ul> <li> <p>Model checkpoints in <code>&lt;model_output_folder&gt;</code>:</p> <ul> <li>Best model: <code>{epoch}-{val_loss}-{val_pearson_corrcoef}-{val_r2_score}.ckpt</code></li> <li>TensorBoard logs for training monitoring</li> </ul> </li> </ul>"},{"location":"user_guide/#224-inference","title":"2.2.4. Inference","text":""},{"location":"user_guide/#2241-via-napari-plugin","title":"2.2.4.1. Via Napari Plugin","text":"<ol> <li> <p>Launch Napari:    <pre><code>python -m napari</code></pre></p> </li> <li> <p>Load MetaLens plugin:</p> <ul> <li>Navigate to <code>Plugins &gt; MetaLens</code></li> <li>Click \"MetaLens Viewer\"</li> </ul> </li> <li> <p>Use the plugin:</p> <ul> <li>Load microscopy data using \"Load Microscopy Data\"</li> <li>Load model using \"Load Model\"</li> <li> <p>Adjust inference parameters:</p> <ul> <li>Evaluation Range: Size of region to analyze, in pixels</li> <li>Step Size: Distance between predictions in pixels\\ Note: Lower step size provides more accurate predictions but increases computation time.  For visualization purposes, you can use larger step sizes combined with Gaussian blur  (recommended: step_size=2 with Gaussian blur sigma=2)</li> <li>Batch Size: Number of patches per batch</li> </ul> </li> <li> <p>Run inference using \"Run Inference\"</p> </li> <li>Save results using \"Save Results\"</li> </ul> </li> </ol>"},{"location":"user_guide/#2242-via-command-line","title":"2.2.4.2. Via Command Line","text":"<pre><code>python metalens/dl/eval.py &lt;input_image&gt; &lt;model_path&gt;</code></pre> <p>Expected inputs:</p> <ul> <li><code>&lt;input_image&gt;</code>: Multi-channel TIFF file of the cells</li> <li><code>&lt;model_path&gt;</code>: Path to trained model checkpoint (.ckpt file)</li> </ul> <p>Output:</p> <ul> <li> <p>HDF5 file containing:</p> <ul> <li><code>pred</code>: Predicted metabolite intensities (height \u00d7 width \u00d7 n_metabolites)</li> <li><code>metabolites</code>: List of predicted metabolite names</li> </ul> </li> </ul>"},{"location":"user_guide/#23-complete-pipeline-example","title":"2.3. Complete Pipeline Example","text":"<p>The following example shows how to process your own data from scratch:</p> <ol> <li> <p>Prepare environment:     <pre><code>conda activate metalens</code></pre></p> </li> <li> <p>Prepare your data:     Place your microscopy and mass spec files in <code>data/raw_data/</code></p> </li> <li> <p>Preprocess data:     <pre><code>python metalens/preprocessing/microscopy_registration_crop.py sample_001\npython metalens/preprocessing/cell_segmentation.py sample_001\npython metalens/preprocessing/AM_segmenation_inference.py sample_001\npython metalens/preprocessing/make_training_patches.py sample_001</code></pre></p> </li> <li> <p>Train model     <pre><code>python metalens/dl/train.py data/training_data models</code></pre></p> </li> <li> <p>Run inference     <pre><code>python metalens/dl/eval.py data/eval_dataset.tif models/trained_model.ckpt</code></pre></p> </li> </ol>"},{"location":"user_guide/#24-expected-directory-structure","title":"2.4. Expected Directory Structure","text":"<p>After sucessfully running MetaLens on a new dataset named <code>sample_001</code>, the directory structure should be: <pre><code>metalens/\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 raw_data/\n\u2502   \u2502   \u251c\u2500\u2500 sample_001_preMALDI_channel1.tif\n\u2502   \u2502   \u251c\u2500\u2500 sample_001_postMALDI_channel1.tif\n\u2502   \u2502   \u251c\u2500\u2500 sample_001_cells.tif\n\u2502   \u2502   \u251c\u2500\u2500 sample_001_ablation_marks_tf.tif`\n\u2502   \u2502   \u251c\u2500\u2500 sample_001.imzML\n\u2502   \u2502   \u251c\u2500\u2500 sample_001.ibd\n\u2502   \u2502   \u251c\u2500\u2500 sample_001_ablation_marks_tf_pred.tif\n\u2502   \u2502   \u2514\u2500\u2500 sample_001_cells_mask.tif \n\u2502   \u251c\u2500\u2500 training_data/\n\u2502   \u2502   \u251c\u2500\u2500 sample_001_0.tif\n\u2502   \u2502   \u251c\u2500\u2500 sample_001_0.tif\n\u2502   \u2502   \u251c\u2500\u2500 sample_001_0.tif\n\u2502   \u2502   \u251c\u2500\u2500 ...\n\u2502   \u2502   \u2514\u2500\u2500 ion_intensities.csv\n\u2502   \u2514\u2500\u2500 output/\n\u2502       \u2514\u2500\u2500output.h5\n\u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 AM_segmentation.pth\n\u2502   \u2514\u2500\u2500 trained_model.ckpt\n\u2514\u2500\u2500 metalens/\n    \u251c\u2500\u2500 dl/\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 eval.py\n    \u2502   \u251c\u2500\u2500 train.py\n    \u2502   \u2514\u2500\u2500 utils.py\n    \u251c\u2500\u2500 napari/\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 plugin.py\n    \u2502   \u2514\u2500\u2500 napari.yaml\n    \u2514\u2500\u2500 preprocessing/\n        \u251c\u2500\u2500 AM_segmenation_inference.py\n        \u251c\u2500\u2500 cell_segmentation.py\n        \u251c\u2500\u2500 make_training_patches.py\n        \u2514\u2500\u2500 microscopy_registration_crop.py</code></pre></p>"}]}